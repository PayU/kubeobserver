apiVersion: apps/v1
kind: Deployment
metadata:
    name: kubeobserver-deployment
    namespace: default
    labels:
      app: kubeobserver
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0%
  selector:
    matchLabels:
        app: kubeobserver
  template:
    metadata:
      labels:
        app: kubeobserver
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - kubeobserver
            topologyKey: "kubernetes.io/hostname"
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - kubeobserver
              topologyKey: "failure-domain.beta.kubernetes.io/zone"
      imagePullSecrets:
      - name: {{ .Values.ImagePullSecret }}
      containers:
      - name: kubeobserver
        image: {{ .Values.DockerImage }}
        imagePullPolicy: Always
        env:
          - name: LOG_LEVEL
            value: 'info'
          - name: PORT
            value: '8080'
        ports:
        - name: client
          protocol: TCP
          containerPort: "8080"
        resources:
          requests:
            cpu: "0.5"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: "/health"
            port: "8080"
            scheme: HTTP
          periodSeconds: 5
          initialDelaySeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
